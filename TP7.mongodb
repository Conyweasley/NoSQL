/* global use, db */
// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.
// The result of the last command run in a playground is shown on the results panel.
// By default the first 20 documents will be returned with a cursor.
// Use 'console.log()' to print to the debug output.
// For more documentation on playgrounds please refer to
// https://www.mongodb.com/docs/mongodb-vscode/playgrounds/

// Select the database to use.
/* global use, db */
// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.
// The result of the last command run in a playground is shown on the results panel.
// By default the first 20 documents will be returned with a cursor.
// Use 'console.log()' to print to the debug output.
// For more documentation on playgrounds please refer to
// https://www.mongodb.com/docs/mongodb-vscode/playgrounds/

// Select the database to use.

// ESTE ES LA QUE VA PARA CARGAR DATOS
// mongorestore --host localhost --drop --gzip --db mflix mflix/

//Este para inciar
//sudo systemctl start mongod



// Insertar 5 nuevos usuarios en la colección users. Para cada nuevo usuario creado, insertar al menos un comentario realizado por el usuario en la colección comments.
use('mflix')
db.movies.findOne()
db.comments.find({"email":"totoro@fakegmail.com"})
db.users.insertMany([
    {
        "name": "Pancito",
        "email": "totoro@fakegmail.com",
      },
    {
        "name": "Bizcochuelo",
        "email": "elbizco@fakegmail.com",
    },
    {
        "name": "Mermelada",
        "email": "dedurazno@fakegmail.com",
    },
    {
        "name": "Mantecoso",
        "email": "mantecaligth@fakegmail.com",
    },
    {
        "name": "Anvorgueso",
        "email": "concheddar@fakegmail.com",
    }
]
)
/*
db.users.updateMany(
    {name: {$in: ["Pancito", "Bizcochuelo", "Mermelada", "Mantecoso", "Anvorgueso"]}}

)
*/
db.comments.insertMany([
    {
        "name": "Pancito",
        "email": "totoro@fakegmail.com",
        "movie_id": "573a1390f29313caabcd418c",
        "text": "Esta pelicula me parece terrible",
        "date": new Date()
      },
    {
        "name": "Bizcochuelo",
        "email": "elbizco@fakegmail.com",
        "movie_id": "573a1390f29313caabcd418c",
        "text": "Esta pelicula me parece una locura",
        "date": new Date()
    },
    {
        "name": "Mermelada",
        "email": "dedurazno@fakegmail.com",
        "movie_id": "573a1390f29313caabcd418c",
        "text": "Buena peli",
        "date": new Date()
    },
    {
        "name": "Mantecoso",
        "email": "mantecaligth@fakegmail.com",
        "movie_id": "573a1390f29313caabcd418c",
        "text": "Me dormí a la mitad",
        "date": new Date()
    },
    {
        "name": "Anvorgueso",
        "email": "concheddar@fakegmail.com",
        "movie_id": "573a1390f29313caabcd418c",
        "text": "No entendí. La policia sabía que asuntos internos le tendía una trampa?",
        "date": new Date()
    }
]
)
db.movies.findOne()

// Listar el título, año, actores (cast), directores y rating de las 10 películas con mayor rating (“imdb.rating”) de la década del 90. 
db.movies.find(
    {
            "year":{$gte: 1990, $lte: 1999}, 
            "imdb.rating": {$ne: ""}
    },
    {"title":1, "year":1, "cast":1, "directors":1, "imdb.rating":1, "_id":0}
).sort({"imdb.rating":-1})

// ¿Cuál es el valor del rating de la película que tiene mayor rating? (Hint: Chequear que el valor de “imdb.rating” sea de tipo “double”).
db.movies.find(
        {
            "year":{$gte: 1990, $lte: 1999}, 
            "imdb.rating": {$ne: ""}
        },
        {"imdb.rating":1, "_id":0}
    ).sort({"imdb.rating":-1}).limit(1);

// Listar el nombre, email, texto y fecha de los comentarios que la película con id (movie_id) ObjectId("573a1399f29313caabcee886") 
//recibió entre los años 2014 y 2016 inclusive. Listar ordenados por fecha. 

db.comments.find(
    {
        "movie_id": ObjectId("573a1399f29313caabcee886"),
        "date":{$gte: new Date("2014-01-01T00:00:00Z"), $lte: new Date("2016-12-31T23:59:59Z")},
    },
    {"name":1, "email":1, "text":1, "date":1, "_id":0}
)
.sort({"date":1})

//Escribir una nueva consulta (modificando la anterior) para responder ¿Cuántos comentarios recibió?
db.comments.find(
    {
        "movie_id": ObjectId("573a1399f29313caabcee886"),
        "date":{$gte: new Date("2014-01-01T00:00:00Z"), $lte: new Date("2016-12-31T23:59:59Z")},
    },
    {"name":1, "email":1, "text":1, "date":1, "_id":0}
)
.sort({"date":1}).

//Listar el nombre, id de la película, texto y fecha de los 3 comentarios más recientes realizados por el usuario con email patricia_good@fakegmail.com. 
db.comments.find(
    {"email":"patricia_good@fakegmail.com"},
    {"email":0}
).sort({"date":-1}).limit(3)

// Listar el título, idiomas (languages), géneros, fecha de lanzamiento (released) y número de votos (“imdb.votes”)
// de las películas de géneros Drama y Action (la película puede tener otros géneros adicionales), que solo están disponibles 
//en un único idioma y por último tengan un rating (“imdb.rating”) mayor a 9 o bien tengan una duración (runtime) de al menos 180 minutos.
// Listar ordenados por fecha de lanzamiento y número de votos.

db.movies.find(
    {"genres":{$all:["Drama", "Action"]},"languages":{$size:1}, $or:[{"imdb.rating":{$gt:9}}, {"runtime":{$gte:180}}]},
    {"title":1, "languages":1, "genres":1, "released":1, "imdb.votes":1,"_id":0, "imdb.rating":1}
).sort({"released":1}, {"imdb.votes":1})

db.theaters.findOne()

/* Listar el id del teatro (theaterId), estado (“location.address.state”), ciudad (“location.address.city”),
 y coordenadas (“location.geo.coordinates”) de los teatros que se encuentran en algunos de los estados "CA", 
 "NY", "TX" y el nombre de la ciudades comienza con una ‘F’. Listar ordenados por estado y ciudad.
 */


/*, "location.adress.city": /^f/*/

db.theaters.find(
    {"location.address.state": {$in:["CA", "NY", "TX"]}, 
    "location.adress.city": /^F/
    },
    {
        "_id:" : 0,
        "theaterId": 1,
        "location.address.state": 1,
        "location.address.city": 1,
        "location.geo.coordinates": 1
    }
).sort(
    {
        "location.adress.state": 1,
        "location.adress.city": 1
    }
)

/* Actualizar los valores de los campos texto (text) y fecha (date) del comentario cuyo id es ObjectId("5b72236520a3277c015b3b73") 
a "mi mejor comentario" y fecha actual respectivamente. */

db.comments.updateOne({
    "_id": ObjectId("5b72236520a3277c015b3b73")
},
{
    $set:{"text": "mi mejor comentario", "date": new Date()}
}
)

/*
Actualizar el valor de la contraseña del usuario cuyo email es joel.macdonel@fakegmail.com a "some password". La misma consulta debe poder insertar
 un nuevo usuario en caso que el usuario no exista. Ejecute la consulta dos veces. ¿Qué operación se realiza en cada caso?  (Hint: usar upserts).  
*/

db.users.updateOne(
    {
        "email": "joel.macdonel@fakegmail.com"
    },
    {
        $set:{"password": "some password"}
    },
    {
        upsert: true
    }
)

/*
Remover todos los comentarios realizados por el usuario cuyo email es victor_patel@fakegmail.com
durante el año 1980. */

db.comments.deleteMany(
    {
        "email": "victor_patel@fakegmail.com", 
        "date": {
            $gte:new Date("1980-01-01T00:00:00Z"),
            $lte:new Date("1980-12-31T23:59:59")}
    }
)

// No hacia falta, podía ser:

/* 
"date": {
    $gte: new Date("1980-01-01"),
    $lt: new Date("1981-01-01")
*/

/*-------------------------------------------------------------------------------------------*/ 
// Parte 2

db.restaurants.findOne()

/*
Listar el id del restaurante (restaurant_id) y las calificaciones de los restaurantes donde al menos una de sus calificaciones 
haya sido realizada entre 2014 y 2015 inclusive, y que tenga una puntuación (score) mayor a 70 y menor o igual a 90.
 */

db.restaurants.find(
    {
        "grades":{
            $elemMatch:{
                "date":{
                    $gte: new Date("2014-01-01"),
                    $lt: new Date("2016-01-01")
                },
                "score":{
                    $gt: 70, $lte: 90
                }
            }
        }
    },
    {
        "restaurant_id":1,
        "grades":1,
        "_id":0
    }
)

/*
Agregar dos nuevas calificaciones al restaurante cuyo id es "50018608". A continuación se especifican las calificaciones a agregar en una sola consulta.  

{
	"date" : ISODate("2019-10-10T00:00:00Z"),
	"grade" : "A",
	"score" : 18
}

{
	"date" : ISODate("2020-02-25T00:00:00Z"),
	"grade" : "A",
	"score" : 21
}

 */

db.restaurants.updateOne(
    {restaurant_id: "50018608"},
    {
      $push: {
        grades: {
          $each: [
            {
              date: ISODate("2019-10-10T00:00:00Z"),
              grade: "A",
              score: 18
            },
            {
              date: ISODate("2020-02-25T00:00:00Z"),
              grade: "A",
              score: 21
            }
          ]
        }
      }
    }
)

// Para eliminar esos mismos, usamos $pull

db.restaurants.updateOne(
    {restaurant_id: "50018608"},
    {
      $pull: {
        grades: {
          date: {
            $in: [
              ISODate("2019-10-10T00:00:00Z"),
              ISODate("2020-02-25T00:00:00Z")
            ]
          }
        }
      }
    }
)


db.restaurants.find(
    {restaurant_id: "50018608"}
)